name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # Fast validation jobs that don't need dependencies
  validate-structure:
    name: 🏗️ Structure & Config
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate file structure
      run: |
        echo "🔍 Validating project structure..."
        
        # Check critical files exist
        missing_files=()
        required_files=("firebase.json" ".firebaserc" "firestore.rules" "deploy.ps1")
        
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            missing_files+=("$file")
          else
            echo "✅ $file found"
          fi
        done
        
        if [[ ${#missing_files[@]} -gt 0 ]]; then
          echo "❌ Missing required files: ${missing_files[*]}"
          exit 1
        fi
        
        # Check src directory structure
        if [[ -d "src" ]]; then
          echo "✅ src directory found"
          html_files=("index.html" "pricing.html" "how-it-works.html" "start-your-story.html")
          for file in "${html_files[@]}"; do
            if [[ -f "src/$file" ]]; then
              echo "✅ src/$file found"
            else
              echo "⚠️ src/$file missing"
            fi
          done
          
          # Check admin panel files
          if [[ -f "src/admin.html" ]]; then
            echo "✅ src/admin.html found"
          else
            echo "⚠️ src/admin.html missing (admin panel not configured)"
          fi
        else
          echo "❌ src directory not found!"
          exit 1
        fi
        
        # Check for production firestore rules
        if [[ -f "firestore.rules.production" ]]; then
          echo "✅ firestore.rules.production found"
        else
          echo "⚠️ firestore.rules.production missing (needed for secure deployment)"
        fi

    - name: Validate JSON configurations
      run: |
        echo "🔍 Validating JSON configurations..."
        
        # Validate firebase.json
        if jq empty firebase.json 2>/dev/null; then
          echo "✅ firebase.json is valid JSON"
          
          # Check required sections
          if jq -e '.hosting' firebase.json >/dev/null; then
            echo "✅ Firebase Hosting configuration found"
          else
            echo "⚠️ No hosting configuration in firebase.json"
          fi
          
          if jq -e '.functions' firebase.json >/dev/null; then
            echo "✅ Firebase Functions configuration found"
          else
            echo "⚠️ No functions configuration in firebase.json"
          fi
          
          if jq -e '.firestore' firebase.json >/dev/null; then
            echo "✅ Firestore configuration found"
          else
            echo "⚠️ No firestore configuration in firebase.json"
          fi
          
          # Check for admin route configuration
          if jq -e '.hosting.rewrites[] | select(.source == "/admin")' firebase.json >/dev/null; then
            echo "✅ Admin route configuration found"
          else
            echo "⚠️ No admin route configured in firebase.json"
          fi
        else
          echo "❌ firebase.json is invalid JSON"
          exit 1
        fi
        
        # Validate .firebaserc
        if jq empty .firebaserc 2>/dev/null; then
          echo "✅ .firebaserc is valid JSON"
        else
          echo "❌ .firebaserc is invalid JSON"
          exit 1
        fi



  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 4
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Scan for secrets
      run: |
        echo "🔍 Scanning for potential secrets..."
        
        # Check for common secret patterns
        secret_patterns=(
          "password\s*=\s*[\"'][^\"']+[\"']"
          "api[_-]?key\s*=\s*[\"'][^\"']+[\"']"
          "secret\s*=\s*[\"'][^\"']+[\"']"
          "token\s*=\s*[\"'][^\"']+[\"']"
          "sk_live_"
          "pk_live_"
          "AKIA[0-9A-Z]{16}"
        )
        
        found_issues=false
        for pattern in "${secret_patterns[@]}"; do
          if grep -r -E "$pattern" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.log" 2>/dev/null; then
            echo "⚠️ Potential secret found matching pattern: $pattern"
            found_issues=true
          fi
        done
        
        if [[ "$found_issues" == "false" ]]; then
          echo "✅ No obvious secrets found"
        fi

    - name: Check Firestore rules security
      run: |
        echo "🔍 Checking Firestore rules security..."
        
        # Check if using insecure development rules
        if grep -q "allow read, write: if true" firestore.rules; then
          echo "⚠️ WARNING: firestore.rules contains insecure development rules!"
          echo "  Development rules should not be used in production"
          
          # Check if production rules exist
          if [[ -f "firestore.rules.production" ]]; then
            echo "✅ Production rules file exists (firestore.rules.production)"
            echo "  Ensure deployment uses production rules"
          else
            echo "❌ No production rules file found!"
            echo "  Create firestore.rules.production with secure rules"
          fi
        else
          echo "✅ firestore.rules doesn't contain obvious insecure patterns"
        fi

    - name: Check admin authentication
      run: |
        echo "🔍 Checking admin authentication configuration..."
        
        # Check admin.html for hardcoded credentials
        if [[ -f "src/admin.html" ]]; then
          if grep -q "password.*=.*['\"]admin['\"]" src/admin.html || \
             grep -q "password.*=.*['\"]password['\"]" src/admin.html || \
             grep -q "credentials.*hardcoded" src/admin.html; then
            echo "❌ Found potential hardcoded credentials in admin.html!"
            echo "  Use Firebase Authentication instead"
            exit 1
          else
            echo "✅ No obvious hardcoded credentials in admin.html"
          fi
          
          # Check for Firebase Auth usage
          if grep -q "firebase.auth()" src/admin.html; then
            echo "✅ Admin panel appears to use Firebase Authentication"
          else
            echo "⚠️ Admin panel might not be using Firebase Authentication"
          fi
        fi

    - name: Check for vulnerable dependencies
      run: |
        echo "🔍 Checking for .env files and other sensitive files..."
        
        # Check for .env files
        if find . -name "*.env" -not -path "./node_modules/*" | grep -q .; then
          echo "⚠️ Found .env files:"
          find . -name "*.env" -not -path "./node_modules/*"
          echo "Ensure these are in .gitignore and don't contain real credentials"
        else
          echo "✅ No .env files found in repository"
        fi

  # Jobs that need dependencies
  setup-cache:
    name: 📦 Setup Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 8
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate cache key
      id: cache-key
      run: |
        key="deps-${{ runner.os }}-${{ env.NODE_VERSION }}-$(sha256sum functions/package-lock.json package-lock.json | sha256sum | cut -d' ' -f1)"
        echo "key=$key" >> $GITHUB_OUTPUT
        echo "Generated cache key: $key"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          functions/node_modules
          ~/.npm
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          deps-${{ runner.os }}-${{ env.NODE_VERSION }}-

    - name: Install dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        echo "📦 Installing dependencies..."
        
        # Install root dependencies if package.json exists
        if [[ -f "package.json" ]]; then
          echo "Installing root dependencies..."
          npm ci --prefer-offline --no-audit --no-fund
          echo "✅ Root dependencies installed"
        fi
        
        # Install functions dependencies
        if [[ -f "functions/package.json" ]]; then
          echo "Installing functions dependencies..."
          cd functions
          npm ci --prefer-offline --no-audit --no-fund
          cd ..
          echo "✅ Functions dependencies installed"
        fi

  lint-frontend:
    name: 🎨 Frontend Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Lint HTML files
      run: |
        echo "🔍 Linting HTML files..."
        
        html_files=$(find src -name "*.html" 2>/dev/null || true)
        if [[ -n "$html_files" ]]; then
          for file in $html_files; do
            echo "Checking $file..."
            # Basic HTML validation
            if grep -q "<!DOCTYPE" "$file" && grep -q "<html" "$file" && grep -q "</html>" "$file"; then
              echo "✅ $file has basic HTML structure"
            else
              echo "⚠️ $file missing basic HTML structure"
            fi
          done
        else
          echo "⚠️ No HTML files found in src directory"
        fi

    - name: Lint CSS files
      run: |
        echo "🔍 Linting CSS files..."
        
        css_files=$(find src -name "*.css" 2>/dev/null || true)
        if [[ -n "$css_files" ]]; then
          for file in $css_files; do
            echo "Checking $file..."
            # Basic CSS syntax check
            if [[ -s "$file" ]]; then
              echo "✅ $file exists and is not empty"
            else
              echo "⚠️ $file is empty"
            fi
          done
        else
          echo "⚠️ No CSS files found in src directory"
        fi

    - name: Lint JavaScript files
      run: |
        echo "🔍 Linting JavaScript files..."
        
        js_files=$(find src -name "*.js" 2>/dev/null || true)
        if [[ -n "$js_files" ]]; then
          for file in $js_files; do
            echo "Checking $file..."
            # Check for potential security issues
            if grep -q "eval(" "$file"; then
              echo "⚠️ Found eval() usage in $file - potential security risk"
            fi
            if grep -q "innerHTML.*+" "$file"; then
              echo "⚠️ Found dynamic innerHTML in $file - potential XSS risk"
            fi
            echo "✅ $file basic checks passed"
          done
        else
          echo "⚠️ No JavaScript files found in src directory"
        fi

    - name: Lint admin panel
      run: |
        echo "🔍 Linting admin panel..."
        
        if [[ -f "src/admin.html" ]]; then
          echo "Checking admin.html..."
          
          # Check for inline scripts
          if grep -q "<script[^>]*>[^<]" src/admin.html; then
            echo "✅ Admin panel contains inline scripts (expected for authentication)"
          fi
          
          # Check for Firebase imports
          if grep -q "firebase-app.js" src/admin.html && grep -q "firebase-auth.js" src/admin.html; then
            echo "✅ Admin panel imports Firebase libraries"
          else
            echo "⚠️ Admin panel missing Firebase library imports"
          fi
          
          # Check for security headers
          if grep -q "Content-Security-Policy" src/admin.html; then
            echo "✅ Admin panel has CSP headers"
          else
            echo "⚠️ Consider adding Content-Security-Policy headers"
          fi
        else
          echo "⚠️ No admin panel found (src/admin.html)"
        fi

  test-backend:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: setup-cache
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Restore dependencies
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          functions/node_modules
          ~/.npm
        key: ${{ needs.setup-cache.outputs.cache-key }}
        restore-keys: |
          deps-${{ runner.os }}-${{ env.NODE_VERSION }}-

    - name: Run ESLint
      run: |
        echo "🔍 Running ESLint on functions..."
        if [[ -f "functions/package.json" ]]; then
          cd functions
          if npm run lint --if-present; then
            echo "✅ ESLint passed"
          else
            echo "⚠️ ESLint found issues"
            exit 1
          fi
          cd ..
        else
          echo "⚠️ No functions package.json found"
        fi

    - name: Run tests
      run: |
        echo "🧪 Running backend tests..."
        if [[ -f "functions/package.json" ]]; then
          cd functions
          if npm test --if-present; then
            echo "✅ Tests passed"
          else
            echo "⚠️ Tests failed or no test script found"
          fi
          cd ..
        else
          echo "⚠️ No functions package.json found"
        fi
      continue-on-error: true

  validate-firebase:
    name: 🔥 Firebase Validation
    runs-on: ubuntu-latest
    timeout-minutes: 6
    needs: setup-cache
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Firebase CLI
      run: |
        npm install -g firebase-tools

    - name: Validate Firebase configuration
      run: |
        echo "🔍 Validating Firebase configuration..."
        
        # Validate firebase.json schema
        if firebase --help >/dev/null 2>&1; then
          echo "✅ Firebase CLI installed successfully"
        else
          echo "❌ Firebase CLI installation failed"
          exit 1
        fi
        
        # Check if firebase.json is valid
        if [[ -f "firebase.json" ]]; then
          echo "✅ firebase.json found"
        else
          echo "❌ firebase.json not found"
          exit 1
        fi

    - name: Validate Firestore rules
      run: |
        echo "🔍 Validating Firestore rules..."
        if [[ -f "firestore.rules" ]]; then
          echo "✅ firestore.rules found"
          # Basic syntax check for Firestore rules
          if grep -q "rules_version" firestore.rules; then
            echo "✅ firestore.rules has rules_version"
          else
            echo "⚠️ firestore.rules missing rules_version"
          fi
        else
          echo "⚠️ firestore.rules not found"
        fi

  # Summary job that waits for all validations
  validation-summary:
    name: 📋 Validation Summary
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [validate-structure, security-scan, lint-frontend, test-backend, validate-firebase]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "# 📋 PR Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Pull Request:** #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔍 Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Structure & Config | ${{ needs.validate-structure.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔒 Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🎨 Frontend Lint | ${{ needs.lint-frontend.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Backend Tests | ${{ needs.test-backend.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔥 Firebase Validation | ${{ needs.validate-firebase.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if all validations passed
        if [[ "${{ needs.validate-structure.result }}" == "success" ]] && 
           [[ "${{ needs.security-scan.result }}" == "success" ]] && 
           [[ "${{ needs.lint-frontend.result }}" == "success" ]] && 
           [[ "${{ needs.test-backend.result }}" == "success" ]] && 
           [[ "${{ needs.validate-firebase.result }}" == "success" ]]; then
          echo "## 🎉 All Validations Passed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This PR meets all quality standards and is ready for review." >> $GITHUB_STEP_SUMMARY
          echo "Once approved and merged, it will automatically deploy to production." >> $GITHUB_STEP_SUMMARY
          echo ""
          echo "🎉 ALL VALIDATIONS PASSED!"
          echo "This PR meets quality standards and is ready for review."
        else
          echo "## ❌ Some Validations Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please review the failed checks above and fix them before merging." >> $GITHUB_STEP_SUMMARY
          echo "All validations must pass before the PR can be merged into main." >> $GITHUB_STEP_SUMMARY
          echo ""
          echo "❌ SOME VALIDATIONS FAILED!"
          echo "Please review the issues above and fix them before merging."
          exit 1
        fi 
name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'

jobs:
  validate:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          functions/package-lock.json
          src/package-lock.json
          package-lock.json

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Install Firebase CLI
      run: npm install -g firebase-tools

    - name: Install Dependencies
      run: |
        echo "Installing dependencies..."
        
        # Install root dependencies if package.json exists
        if [ -f "package.json" ]; then
          echo "Installing root dependencies..."
          npm ci
          echo "‚úÖ Root dependencies installed"
        fi
        
        # Install frontend dependencies
        if [ -f "src/package.json" ]; then
          echo "Installing frontend dependencies..."
          cd src
          npm ci
          cd ..
          echo "‚úÖ Frontend dependencies installed"
        fi
        
        # Install backend dependencies
        if [ -f "functions/package.json" ]; then
          echo "Installing backend dependencies..."
          cd functions
          npm ci
          cd ..
          echo "‚úÖ Backend dependencies installed"
        fi

    - name: Validate Firebase Configuration
      run: |
        echo "Validating Firebase configuration..."
        
        # Check firebase.json
        if [ -f "firebase.json" ]; then
          if jq empty firebase.json 2>/dev/null; then
            echo "‚úÖ firebase.json is valid JSON"
            
            # Check for required sections
            if jq -e '.hosting' firebase.json >/dev/null; then
              echo "‚úÖ Firebase Hosting configuration found"
            else
              echo "‚ö†Ô∏è No hosting configuration in firebase.json"
            fi
            
            if jq -e '.functions' firebase.json >/dev/null; then
              echo "‚úÖ Firebase Functions configuration found"
            else
              echo "‚ö†Ô∏è No functions configuration in firebase.json"
            fi
            
            if jq -e '.firestore' firebase.json >/dev/null; then
              echo "‚úÖ Firestore configuration found"
            else
              echo "‚ö†Ô∏è No firestore configuration in firebase.json"
            fi
          else
            echo "‚ùå firebase.json is invalid JSON"
            exit 1
          fi
        else
          echo "‚ùå firebase.json not found!"
          exit 1
        fi
        
        # Check .firebaserc
        if [ -f ".firebaserc" ]; then
          if jq empty .firebaserc 2>/dev/null; then
            echo "‚úÖ .firebaserc is valid JSON"
          else
            echo "‚ùå .firebaserc is invalid JSON"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è .firebaserc not found"
        fi
        
        # Check firestore.rules
        if [ -f "firestore.rules" ]; then
          echo "‚úÖ firestore.rules found"
        else
          echo "‚ö†Ô∏è firestore.rules not found"
        fi

    - name: Frontend Code Quality Checks
      run: |
        echo "Running frontend code quality checks..."
        
        if [ -d "src" ]; then
          cd src
          
          # Run ESLint
          echo "Running ESLint..."
          npm run lint
          echo "‚úÖ ESLint passed"
          
          # Run HTML validation
          echo "Running HTML validation..."
          npm run validate:html
          echo "‚úÖ HTML validation passed"
          
          # Run CSS validation
          echo "Running CSS validation..."
          npm run validate:css
          echo "‚úÖ CSS validation passed"
          
          cd ..
        else
          echo "‚ùå src directory not found!"
          exit 1
        fi

    - name: Frontend Unit Tests
      run: |
        echo "Running frontend unit tests..."
        
        if [ -d "src" ]; then
          cd src
          
          # Run tests with coverage
          npm run test:ci
          echo "‚úÖ Frontend tests passed with required coverage"
          
          cd ..
        else
          echo "‚ùå src directory not found!"
          exit 1
        fi

    - name: Backend Code Quality Checks
      run: |
        echo "Running backend code quality checks..."
        
        if [ -d "functions" ]; then
          cd functions
          
          # Run ESLint
          echo "Running ESLint on functions..."
          npm run lint
          echo "‚úÖ Backend ESLint passed"
          
          cd ..
        else
          echo "‚ö†Ô∏è functions directory not found, skipping backend quality checks"
        fi

    - name: Backend Unit Tests
      run: |
        echo "Running backend unit tests..."
        
        if [ -d "functions" ]; then
          cd functions
          
          # Run tests with coverage
          npm run test:ci
          echo "‚úÖ Backend tests passed with required coverage"
          
          cd ..
        else
          echo "‚ö†Ô∏è functions directory not found, skipping backend tests"
        fi

    - name: Infrastructure Validation
      run: |
        echo "Running infrastructure validation..."
        
        if [ -d "terraform" ]; then
          cd terraform
          
          # Initialize Terraform
          echo "Initializing Terraform..."
          terraform init
          
          # Validate Terraform configuration
          echo "Validating Terraform configuration..."
          terraform validate
          echo "‚úÖ Terraform validation passed"
          
          # Check Terraform formatting
          echo "Checking Terraform formatting..."
          terraform fmt -check -recursive
          echo "‚úÖ Terraform formatting is correct"
          
          # Run Terraform tests if available
          if [ -f "tests/main.tftest.hcl" ]; then
            echo "Running Terraform tests..."
            terraform test
            echo "‚úÖ Terraform tests passed"
          else
            echo "‚ö†Ô∏è No Terraform tests found"
          fi
          
          cd ..
        else
          echo "‚ö†Ô∏è terraform directory not found, skipping infrastructure validation"
        fi

    - name: Security Scanning
      run: |
        echo "Running comprehensive security scans..."
        
        # Check for hardcoded secrets in various file types
        echo "Scanning for hardcoded secrets..."
        
        # Scan JavaScript files for security issues
        echo "Scanning JavaScript files for security patterns..."
        find . -name "*.js" -not -path "./node_modules/*" -not -name "*.test.js" | while read -r jsfile; do
          if grep -q "eval\s*(" "$jsfile"; then
            echo "‚ö†Ô∏è Found eval() usage in $jsfile - potential security risk"
          fi
          if grep -q "innerHTML\s*=.*+" "$jsfile"; then
            echo "‚ö†Ô∏è Found dynamic innerHTML in $jsfile - potential XSS risk"
          fi
        done
        
        # Check for .env files
        if find . -name "*.env" -not -path "./node_modules/*" | grep -q .; then
          echo "‚ö†Ô∏è Found .env files that might contain secrets:"
          find . -name "*.env" -not -path "./node_modules/*"
          echo "Ensure these are in .gitignore and don't contain real credentials"
        else
          echo "‚úÖ No .env files found in repository"
        fi
        
        # Check for common secret patterns in all text files
        echo "Scanning for common secret patterns..."
        if grep -r -i --include="*.js" --include="*.json" --include="*.ts" --include="*.py" --exclude-dir=node_modules \
           -E "(api[_-]?key|password|secret|token|private[_-]?key)\s*[:=]\s*[\"'][^\"']{8,}[\"']" .; then
          echo "‚ö†Ô∏è Potential secrets found in code files"
        else
          echo "‚úÖ No obvious secrets found in code files"
        fi
        
        echo "‚úÖ Security scan completed"

    - name: Upload Frontend Coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: src/coverage/
        retention-days: 7

    - name: Upload Backend Coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: functions/coverage/
        retention-days: 7

    - name: Validation Summary
      if: always()
      run: |
        echo ""
        echo "=== PR VALIDATION SUMMARY ==="
        echo "Pull Request: #${{ github.event.number }}"
        echo "Branch: ${{ github.head_ref }}"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        
        echo ""
        echo "‚úÖ Validations Completed:"
        echo "  - Firebase configuration validation"
        echo "  - Frontend code quality (ESLint, HTML, CSS)"
        echo "  - Frontend unit tests with 70% coverage requirement"
        echo "  - Backend code quality (ESLint)"
        echo "  - Backend unit tests with 75% coverage requirement"
        echo "  - Infrastructure validation (Terraform)"
        echo "  - Comprehensive security scanning"
        
        if [ "${{ job.status }}" = "success" ]; then
          echo ""
          echo "üéâ ALL VALIDATIONS PASSED!"
          echo "This PR meets quality standards and is ready for review."
          echo "Coverage requirements:"
          echo "  - Frontend: 70% minimum (lines, functions, branches, statements)"
          echo "  - Backend: 75% minimum (lines, functions, branches, statements)"
          echo "Once approved and merged, it will automatically deploy to production using Firebase CLI."
        else
          echo ""
          echo "‚ùå SOME VALIDATIONS FAILED!"
          echo "Please review the issues above and fix them before merging."
          echo "All validations must pass before the PR can be merged into main."
          echo ""
          echo "Requirements that must be met:"
          echo "  - Frontend: 70% test coverage minimum"
          echo "  - Backend: 75% test coverage minimum"
          echo "  - All linting and formatting checks must pass"
          echo "  - No security vulnerabilities or hardcoded secrets"
          echo "  - All Terraform validations must pass"
        fi 
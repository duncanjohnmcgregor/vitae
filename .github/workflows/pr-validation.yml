name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  validate:
    name: Validate Pull Request
    runs-on: windows-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          functions/package-lock.json
          package-lock.json

    - name: Get npm cache
      uses: actions/cache@v4
      id: npm-cache
      with:
        path: |
          ~/.npm
          ~/AppData/Roaming/npm
          ~/AppData/Local/npm-cache
        key: ${{ runner.os }}-npm-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-${{ env.NODE_VERSION }}-
          ${{ runner.os }}-npm-

    - name: Cache Firebase CLI
      uses: actions/cache@v4
      id: firebase-cache
      with:
        path: |
          node_modules/.bin
          node_modules/firebase-tools
        key: firebase-cli-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('firebase-tools-version') }}
        restore-keys: |
          firebase-cli-${{ runner.os }}-${{ env.NODE_VERSION }}-
          firebase-cli-${{ runner.os }}-

    - name: Install Firebase CLI (Optimized)
      run: |
        $startTime = Get-Date
        
        # Check if Firebase CLI is cached and working
        if (Test-Path "node_modules/.bin/firebase.cmd") {
          $env:PATH = "$(Get-Location)/node_modules/.bin;$env:PATH"
          if (Get-Command firebase -ErrorAction SilentlyContinue) {
            Write-Host "✅ Firebase CLI restored from cache"
            firebase --version
            $duration = (Get-Date) - $startTime
            Write-Host "⚡ Cache restore time: $($duration.TotalSeconds) seconds"
            
            # Add to GitHub Actions PATH for subsequent steps
            $nodeBinPath = "$(Get-Location)/node_modules/.bin"
            Write-Output $nodeBinPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            exit 0
          }
        }
        
        Write-Host "Installing Firebase CLI (cache miss)..."
        
        # Create a version file for better cache invalidation
        "latest" | Out-File -FilePath "firebase-tools-version" -Encoding utf8
        
        # Simple and reliable installation using npm install
        Write-Host "Installing firebase-tools locally..."
        npm install firebase-tools@latest --no-save --no-audit --no-fund --prefer-offline --silent
        
        # Verify installation
        $env:PATH = "$(Get-Location)/node_modules/.bin;$env:PATH"
        if (Get-Command firebase -ErrorAction SilentlyContinue) {
          Write-Host "✅ Firebase CLI installed successfully"
          firebase --version
          $duration = (Get-Date) - $startTime
          Write-Host "⚡ Installation time: $($duration.TotalSeconds) seconds"
          
          # Add to GitHub Actions PATH for subsequent steps
          $nodeBinPath = "$(Get-Location)/node_modules/.bin"
          Write-Output $nodeBinPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        } else {
          Write-Error "❌ Firebase CLI installation failed"
          exit 1
        }
      shell: pwsh

    - name: Validate deployment script syntax
      run: |
        Write-Host "Validating PowerShell deployment script syntax..."
        
        # Check if deploy.ps1 exists
        if (-not (Test-Path "deploy.ps1")) {
          Write-Error "deploy.ps1 not found!"
          exit 1
        }
        
        # Parse the PowerShell script to check for syntax errors
        try {
          $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content "deploy.ps1" -Raw), [ref]$null)
          Write-Host "✅ deploy.ps1 syntax is valid"
        } catch {
          Write-Error "❌ deploy.ps1 has syntax errors: $($_.Exception.Message)"
          exit 1
        }
        
        # Check for required functions in the script
        $scriptContent = Get-Content "deploy.ps1" -Raw
        $requiredFunctions = @("Deploy-FirebaseFunctions", "Deploy-FirebaseHosting")
        
        foreach ($func in $requiredFunctions) {
          if ($scriptContent -notmatch "function $func") {
            Write-Warning "⚠️ Function '$func' not found in deploy.ps1"
          } else {
            Write-Host "✅ Function '$func' found"
          }
        }
      shell: pwsh

    - name: Validate Firebase configuration
      run: |
        Write-Host "Validating Firebase configuration..."
        
        # Check firebase.json
        if (Test-Path "firebase.json") {
          try {
            $firebaseConfig = Get-Content "firebase.json" | ConvertFrom-Json
            Write-Host "✅ firebase.json is valid JSON"
            
            # Check for required sections
            if ($firebaseConfig.hosting) {
              Write-Host "✅ Firebase Hosting configuration found"
            } else {
              Write-Warning "⚠️ No hosting configuration in firebase.json"
            }
            
            if ($firebaseConfig.functions) {
              Write-Host "✅ Firebase Functions configuration found"
            } else {
              Write-Warning "⚠️ No functions configuration in firebase.json"
            }
            
            if ($firebaseConfig.firestore) {
              Write-Host "✅ Firestore configuration found"
            } else {
              Write-Warning "⚠️ No firestore configuration in firebase.json"
            }
          } catch {
            Write-Error "❌ firebase.json is invalid: $($_.Exception.Message)"
            exit 1
          }
        } else {
          Write-Error "❌ firebase.json not found!"
          exit 1
        }
        
        # Check .firebaserc
        if (Test-Path ".firebaserc") {
          try {
            $firebaseRc = Get-Content ".firebaserc" | ConvertFrom-Json
            Write-Host "✅ .firebaserc is valid JSON"
          } catch {
            Write-Error "❌ .firebaserc is invalid: $($_.Exception.Message)"
            exit 1
          }
        } else {
          Write-Warning "⚠️ .firebaserc not found"
        }
        
        # Check firestore.rules
        if (Test-Path "firestore.rules") {
          Write-Host "✅ firestore.rules found"
        } else {
          Write-Warning "⚠️ firestore.rules not found"
        }
      shell: pwsh

    - name: Install dependencies
      run: |
        Write-Host "Installing dependencies..."
        
        # Install root dependencies
        if (Test-Path "package.json") {
          Write-Host "Installing root dependencies..."
          npm ci
          Write-Host "✅ Root dependencies installed"
        }
        
        # Install functions dependencies
        if (Test-Path "functions/package.json") {
          Write-Host "Installing functions dependencies..."
          Set-Location functions
          npm ci
          Set-Location ..
          Write-Host "✅ Functions dependencies installed"
        }
      shell: pwsh

    - name: Validate Frontend Files
      run: |
        Write-Host "Validating frontend files..."
        
        # Check if src directory exists
        if (Test-Path "src") {
          Write-Host "✅ src directory found"
          
          # Check for main HTML files
          $htmlFiles = @("index.html", "pricing.html", "how-it-works.html", "start-your-story.html")
          foreach ($file in $htmlFiles) {
            if (Test-Path "src/$file") {
              Write-Host "✅ $file found"
            } else {
              Write-Warning "⚠️ $file not found"
            }
          }
          
          # Check for CSS and JS files
          if (Test-Path "src/style.css") {
            Write-Host "✅ style.css found"
          } else {
            Write-Warning "⚠️ style.css not found"
          }
          
          if (Test-Path "src/script.js") {
            Write-Host "✅ script.js found"
          } else {
            Write-Warning "⚠️ script.js not found"
          }
          
        } else {
          Write-Error "❌ src directory not found!"
          exit 1
        }
      shell: pwsh

    - name: Run Backend Tests
      run: |
        Write-Host "Running backend tests..."
        if (Test-Path "functions/package.json") {
          Set-Location functions
          
          # Run linting with relaxed error handling
          Write-Host "Running ESLint on functions..."
          try {
            npm run lint
            Write-Host "✅ ESLint passed"
          } catch {
            Write-Warning "⚠️ ESLint found issues but continuing with tests..."
            Write-Host "ESLint errors: $($_.Exception.Message)"
          }
          
          # Run tests if available
          $packageJson = Get-Content "package.json" | ConvertFrom-Json
          if ($packageJson.scripts.test) {
            Write-Host "Running function tests..."
            try {
              npm test
              Write-Host "✅ Tests passed"
            } catch {
              Write-Warning "⚠️ Some tests failed: $($_.Exception.Message)"
            }
          } else {
            Write-Warning "⚠️ No test script found in functions package.json"
          }
          
          Set-Location ..
          Write-Host "✅ Backend validation completed"
        } else {
          Write-Warning "⚠️ No functions package.json found, skipping backend tests"
        }
      shell: pwsh
      continue-on-error: true

    - name: Security scan
      run: |
        Write-Host "Running security scans..."
        
        # Check for hardcoded secrets in PowerShell script
        if (Test-Path "deploy.ps1") {
          $scriptContent = Get-Content "deploy.ps1" -Raw
          $suspiciousPatterns = @(
            'password\s*=\s*["`''][^"`'']+["`'']',
            'api[_-]?key\s*=\s*["`''][^"`'']+["`'']',
            'secret\s*=\s*["`''][^"`'']+["`'']',
            'token\s*=\s*["`''][^"`'']+["`'']'
          )
          
          $foundIssues = $false
          foreach ($pattern in $suspiciousPatterns) {
            if ($scriptContent -match $pattern) {
              Write-Warning "⚠️ Potential hardcoded credential found matching pattern: $pattern"
              $foundIssues = $true
            }
          }
          
          if (-not $foundIssues) {
            Write-Host "✅ No obvious hardcoded credentials found in deployment script"
          }
        }
        
        # Check for .env files that shouldn't be committed
        $envFiles = Get-ChildItem -Recurse -Name "*.env" -ErrorAction SilentlyContinue
        if ($envFiles) {
          Write-Warning "⚠️ Found .env files that might contain secrets:"
          $envFiles | ForEach-Object { Write-Host "  - $_" }
          Write-Host "Ensure these are in .gitignore and don't contain real credentials"
        }
        
        # Scan JavaScript files for potential security issues
        Write-Host "Scanning JavaScript files for security issues..."
        $jsFiles = Get-ChildItem -Recurse -Name "*.js" | Where-Object { $_ -notlike "node_modules*" -and $_ -notlike "*.test.js" }
        foreach ($jsFile in $jsFiles) {
          $jsContent = Get-Content $jsFile -Raw -ErrorAction SilentlyContinue
          if ($jsContent -and $jsContent -match "eval\s*\(") {
            Write-Warning "⚠️ Found eval() usage in $jsFile - potential security risk"
          }
          if ($jsContent -and $jsContent -match "innerHTML\s*=.*\+") {
            Write-Warning "⚠️ Found dynamic innerHTML in $jsFile - potential XSS risk"
          }
        }
        
        Write-Host "✅ Security scan completed"
      shell: pwsh

    - name: Validation Summary
      if: always()
      run: |
        Write-Host ""
        Write-Host "=== PR VALIDATION SUMMARY ===" -ForegroundColor Green
        Write-Host "Pull Request: #${{ github.event.number }}"
        Write-Host "Branch: ${{ github.head_ref }}"
        Write-Host "Commit: ${{ github.sha }}"
        Write-Host "Author: ${{ github.actor }}"
        
        Write-Host ""
        Write-Host "✅ Validations Completed:" -ForegroundColor Green
        Write-Host "  - PowerShell deployment script syntax"
        Write-Host "  - Firebase configuration validation"
        Write-Host "  - Frontend file structure validation"
        Write-Host "  - Backend tests and linting"
        Write-Host "  - Security scanning"
        
        if ("${{ job.status }}" -eq "success") {
          Write-Host ""
          Write-Host "🎉 ALL VALIDATIONS PASSED!" -ForegroundColor Green
          Write-Host "This PR meets quality standards and is ready for review."
          Write-Host "Once approved and merged, it will automatically deploy to production."
        } else {
          Write-Host ""
          Write-Host "❌ SOME VALIDATIONS FAILED!" -ForegroundColor Red
          Write-Host "Please review the issues above and fix them before merging."
          Write-Host "All validations must pass before the PR can be merged into main."
        }
      shell: pwsh 
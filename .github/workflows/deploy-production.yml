name: 🚀 Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
        - staging
      skip_tests:
        description: 'Skip pre-deployment tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

jobs:
  # Pre-deployment validation (fast parallel checks)
  pre-deploy-validation:
    name: 🔍 Pre-Deploy Validation
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: ${{ !inputs.skip_tests }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate deployment readiness
      run: |
        echo "🔍 Validating deployment readiness..."
        
        # Check critical files
        required_files=("firebase.json" ".firebaserc" "firestore.rules")
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done
        
        # Validate JSON files
        if ! jq empty firebase.json 2>/dev/null; then
          echo "❌ firebase.json is invalid JSON"
          exit 1
        fi
        
        if ! jq empty .firebaserc 2>/dev/null; then
          echo "❌ .firebaserc is invalid JSON"
          exit 1
        fi
        
        echo "✅ All validation checks passed"

  # Setup and prepare shared resources
  setup-deployment:
    name: 🛠️ Setup Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 8
    outputs:
      project-id: ${{ env.PROJECT_ID }}
      cache-key: ${{ steps.cache-key.outputs.key }}
      firebase-cache-key: ${{ steps.firebase-cache-key.outputs.key }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate cache keys
      id: cache-key
      run: |
        deps_key="deploy-${{ runner.os }}-${{ env.NODE_VERSION }}-$(sha256sum functions/package-lock.json | cut -d' ' -f1)"
        echo "key=$deps_key" >> $GITHUB_OUTPUT
        echo "Generated dependencies cache key: $deps_key"

    - name: Generate Firebase cache key
      id: firebase-cache-key
      run: |
        firebase_key="firebase-cli-${{ runner.os }}-${{ env.NODE_VERSION }}-v13"
        echo "key=$firebase_key" >> $GITHUB_OUTPUT
        echo "Generated Firebase cache key: $firebase_key"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          functions/node_modules
          ~/.npm
          ~/.cache/firebase
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          deploy-${{ runner.os }}-${{ env.NODE_VERSION }}-

    - name: Cache Firebase CLI
      id: cache-firebase
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/firebase
          /usr/local/lib/node_modules/firebase-tools
          /usr/local/bin/firebase
        key: ${{ steps.firebase-cache-key.outputs.key }}

    - name: Install Firebase CLI
      if: steps.cache-firebase.outputs.cache-hit != 'true'
      run: |
        echo "📦 Installing Firebase CLI..."
        npm install -g firebase-tools
        firebase --version

    - name: Verify Firebase CLI
      run: |
        echo "🔍 Verifying Firebase CLI installation..."
        which firebase
        firebase --version

    - name: Install Functions Dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        echo "📦 Installing functions dependencies..."
        cd functions
        npm ci --prefer-offline --no-audit --no-fund --silent
        cd ..

    - name: Configure Firebase Project
      run: |
        echo "🔧 Configuring Firebase project..."
        # Use service account authentication
        export GOOGLE_APPLICATION_CREDENTIALS="${{ steps.auth.outputs.credentials_file_path }}"
        firebase use ${{ env.PROJECT_ID }}
        firebase projects:list
        echo "✅ Firebase project configured for ${{ env.PROJECT_ID }}"

  # Parallel deployment jobs
  deploy-functions:
    name: ⚡ Deploy Functions
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: [setup-deployment]
    if: always() && needs.setup-deployment.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Restore Firebase CLI cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/firebase
          /usr/local/lib/node_modules/firebase-tools
          /usr/local/bin/firebase
        key: ${{ needs.setup-deployment.outputs.firebase-cache-key }}

    - name: Verify Firebase CLI
      run: |
        echo "🔍 Verifying Firebase CLI..."
        if ! command -v firebase &> /dev/null; then
          echo "❌ Firebase CLI not found in cache, installing..."
          npm install -g firebase-tools
        fi
        firebase --version

    - name: Restore dependencies
      uses: actions/cache@v4
      with:
        path: |
          functions/node_modules
          ~/.npm
        key: ${{ needs.setup-deployment.outputs.cache-key }}
        restore-keys: |
          deploy-${{ runner.os }}-${{ env.NODE_VERSION }}-

    - name: Install dependencies (if cache miss)
      run: |
        cd functions
        if [[ ! -d "node_modules" ]]; then
          echo "Cache miss - installing dependencies..."
          npm ci --prefer-offline --no-audit --no-fund --silent
        fi
        cd ..

    - name: Deploy Firebase Functions
      run: |
        echo "⚡ Deploying Firebase Functions..."
        # Set up authentication
        export GOOGLE_APPLICATION_CREDENTIALS="${{ steps.auth.outputs.credentials_file_path }}"
        
        # Configure Firebase project
        firebase use ${{ needs.setup-deployment.outputs.project-id }}
        
        # Deploy functions
        firebase deploy --only functions --project ${{ needs.setup-deployment.outputs.project-id }} --force
        echo "✅ Firebase Functions deployed successfully"

  deploy-firestore:
    name: 🗄️ Deploy Firestore
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [setup-deployment]
    if: always() && needs.setup-deployment.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Install Firebase CLI
      run: npm install -g firebase-tools

    - name: Deploy Firestore Rules
      run: |
        echo "🗄️ Deploying Firestore rules..."
        # Set up authentication
        export GOOGLE_APPLICATION_CREDENTIALS="${{ steps.auth.outputs.credentials_file_path }}"
        
        # Configure Firebase project
        firebase use ${{ needs.setup-deployment.outputs.project-id }}
        
        # Deploy Firestore rules
        firebase deploy --only firestore:rules --project ${{ needs.setup-deployment.outputs.project-id }}
        echo "✅ Firestore rules deployed successfully"

    - name: Deploy Firestore Indexes
      run: |
        echo "📊 Deploying Firestore indexes..."
        # Set up authentication
        export GOOGLE_APPLICATION_CREDENTIALS="${{ steps.auth.outputs.credentials_file_path }}"
        
        # Deploy indexes (if any exist)
        firebase deploy --only firestore:indexes --project ${{ needs.setup-deployment.outputs.project-id }} || echo "⚠️ No indexes to deploy"
        echo "✅ Firestore indexes deployment completed"

  deploy-hosting:
    name: 🌐 Deploy Hosting
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [setup-deployment]
    if: always() && needs.setup-deployment.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Install Firebase CLI
      run: npm install -g firebase-tools

    - name: Deploy Firebase Hosting
      run: |
        echo "🌐 Deploying Firebase Hosting..."
        # Set up authentication
        export GOOGLE_APPLICATION_CREDENTIALS="${{ steps.auth.outputs.credentials_file_path }}"
        
        # Configure Firebase project
        firebase use ${{ needs.setup-deployment.outputs.project-id }}
        
        # Deploy hosting
        firebase deploy --only hosting --project ${{ needs.setup-deployment.outputs.project-id }}
        echo "✅ Firebase Hosting deployed successfully"

  # Post-deployment verification and notification
  verify-deployment:
    name: ✅ Verify & Notify
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [setup-deployment, deploy-functions, deploy-firestore, deploy-hosting]
    if: always()
    
    steps:
    - name: Check deployment results
      id: check-results
      run: |
        echo "🔍 Checking deployment results..."
        
        functions_result="${{ needs.deploy-functions.result }}"
        firestore_result="${{ needs.deploy-firestore.result }}"
        hosting_result="${{ needs.deploy-hosting.result }}"
        
        echo "functions_result=$functions_result" >> $GITHUB_OUTPUT
        echo "firestore_result=$firestore_result" >> $GITHUB_OUTPUT
        echo "hosting_result=$hosting_result" >> $GITHUB_OUTPUT
        
        # Count successful deployments
        success_count=0
        total_count=3
        
        [[ "$functions_result" == "success" ]] && ((success_count++))
        [[ "$firestore_result" == "success" ]] && ((success_count++))
        [[ "$hosting_result" == "success" ]] && ((success_count++))
        
        echo "success_count=$success_count" >> $GITHUB_OUTPUT
        echo "total_count=$total_count" >> $GITHUB_OUTPUT
        
        echo "Deployment Results Summary:"
        echo "  ⚡ Functions: $functions_result"
        echo "  🗄️ Firestore: $firestore_result"
        echo "  🌐 Hosting: $hosting_result"
        echo "  📊 Success Rate: $success_count/$total_count"

    - name: Generate deployment summary
      run: |
        echo "# 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "**Project ID:** ${{ needs.setup-deployment.outputs.project-id }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Deployment Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Status | Duration |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| ⚡ Functions | ${{ needs.deploy-functions.result == 'success' && '✅ Success' || '❌ Failed' }} | ~12 min |" >> $GITHUB_STEP_SUMMARY
        echo "| 🗄️ Firestore | ${{ needs.deploy-firestore.result == 'success' && '✅ Success' || '❌ Failed' }} | ~5 min |" >> $GITHUB_STEP_SUMMARY
        echo "| 🌐 Hosting | ${{ needs.deploy-hosting.result == 'success' && '✅ Success' || '❌ Failed' }} | ~8 min |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.check-results.outputs.success_count }}" == "${{ steps.check-results.outputs.total_count }}" ]]; then
          echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All services deployed successfully to production." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Production URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Website:** https://${{ needs.setup-deployment.outputs.project-id }}.web.app" >> $GITHUB_STEP_SUMMARY
          echo "- **Functions:** https://us-central1-${{ needs.setup-deployment.outputs.project-id }}.cloudfunctions.net/" >> $GITHUB_STEP_SUMMARY
          echo "- **Console:** https://console.firebase.google.com/project/${{ needs.setup-deployment.outputs.project-id }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Deployment Issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Some services failed to deploy. Please check the logs above." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Test website accessibility
      if: needs.deploy-hosting.result == 'success'
      run: |
        echo "🌐 Testing website accessibility..."
        sleep 10  # Give hosting a moment to propagate
        
        if curl -f -s -o /dev/null --max-time 30 "https://${{ needs.setup-deployment.outputs.project-id }}.web.app"; then
          echo "✅ Website is accessible"
        else
          echo "⚠️ Website not immediately accessible (may take a few minutes to propagate)"
        fi

    - name: Notify success
      if: needs.deploy-functions.result == 'success' && needs.deploy-firestore.result == 'success' && needs.deploy-hosting.result == 'success'
      run: |
        echo "::notice title=🚀 Deployment Successful::All services deployed successfully to production! Website: https://${{ needs.setup-deployment.outputs.project-id }}.web.app"

    - name: Notify partial failure
      if: steps.check-results.outputs.success_count != steps.check-results.outputs.total_count && steps.check-results.outputs.success_count != '0'
      run: |
        echo "::warning title=⚠️ Partial Deployment::${{ steps.check-results.outputs.success_count }}/${{ steps.check-results.outputs.total_count }} services deployed successfully. Check failed deployments above."

    - name: Notify complete failure
      if: steps.check-results.outputs.success_count == '0'
      run: |
        echo "::error title=❌ Deployment Failed::All deployment services failed. Please check the logs and try again."
        exit 1 
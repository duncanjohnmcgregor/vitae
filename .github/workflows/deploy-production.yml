name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
        - staging

env:
  NODE_VERSION: '18'

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'functions/package-lock.json'

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Install Firebase CLI
      run: |
        echo "Installing Firebase CLI globally..."
        npm install -g firebase-tools
        echo "‚úÖ Firebase CLI installed"

    - name: Install Functions Dependencies  
      run: |
        echo "Installing functions dependencies..."
        cd functions
        npm ci --prefer-offline --no-audit --no-fund --silent
        cd ..
        echo "‚úÖ Functions dependencies installed"

    - name: Set Firebase Project
      run: |
        echo "Setting Firebase project to ${{ secrets.GCP_PROJECT_ID }}..."
        firebase use ${{ secrets.GCP_PROJECT_ID }}
        echo "‚úÖ Firebase project configured"
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}

    - name: Deploy Firebase Functions
      run: |
        echo "Deploying Firebase Functions..."
        firebase deploy --only functions --project ${{ secrets.GCP_PROJECT_ID }}
        echo "‚úÖ Firebase Functions deployed"
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}

    - name: Deploy Firestore Rules
      run: |
        echo "Deploying Firestore rules..."
        firebase deploy --only firestore:rules --project ${{ secrets.GCP_PROJECT_ID }}
        echo "‚úÖ Firestore rules deployed"
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}

    - name: Deploy Firebase Hosting
      run: |
        echo "Deploying Firebase Hosting..."
        firebase deploy --only hosting --project ${{ secrets.GCP_PROJECT_ID }}
        echo "‚úÖ Firebase Hosting deployed"
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}

    - name: Verify Deployment
      run: |
        echo "üéâ Deployment completed successfully!"
        echo ""
        echo "üåê Production URLs:"
        echo "   Website: https://${{ secrets.GCP_PROJECT_ID }}.web.app"
        echo "   Functions: https://us-central1-${{ secrets.GCP_PROJECT_ID }}.cloudfunctions.net/handleWaitlistSubmission"
        echo "   Console: https://console.firebase.google.com/project/${{ secrets.GCP_PROJECT_ID }}"
        echo ""
        echo "Testing website accessibility..."
        curl -f -s -o /dev/null https://${{ secrets.GCP_PROJECT_ID }}.web.app || echo "‚ö†Ô∏è Website not immediately accessible (may take a moment)"
        echo "‚úÖ Deployment verification completed"

    - name: Notify Success
      if: success()
      run: |
        echo "::notice title=Deployment Successful::üöÄ Successfully deployed to production! Website: https://${{ secrets.GCP_PROJECT_ID }}.web.app"

    - name: Notify Failure
      if: failure()
      run: |
        echo "::error title=Deployment Failed::‚ùå Production deployment failed. Check the logs above for details." 
name: üöÄ Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
        - staging
      skip_tests:
        description: 'Skip pre-deployment tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  # Pre-deployment validation (fast parallel checks)
  pre-deploy-validation:
    name: üîç Pre-Deploy Validation
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: ${{ !inputs.skip_tests }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate deployment readiness
      run: |
        echo "üîç Validating deployment readiness..."
        
        # Check critical files
        required_files=("firebase.json" ".firebaserc" "firestore.rules" "firestore.rules.production" "src/admin.html")
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          fi
        done
        
        # Validate JSON files
        if ! jq empty firebase.json 2>/dev/null; then
          echo "‚ùå firebase.json is invalid JSON"
          exit 1
        fi
        
        if ! jq empty .firebaserc 2>/dev/null; then
          echo "‚ùå .firebaserc is invalid JSON"
          exit 1
        fi
        
        # Check for admin route in firebase.json
        if ! jq -e '.hosting.rewrites[] | select(.source == "/admin")' firebase.json > /dev/null; then
          echo "‚ùå Admin route not configured in firebase.json"
          exit 1
        fi
        
        echo "‚úÖ All validation checks passed"

    - name: Security validation
      run: |
        echo "üîí Validating security configuration..."
        
        # Check if using development Firestore rules
        if grep -q "DEVELOPMENT ONLY - INSECURE" firestore.rules; then
          echo "‚ö†Ô∏è WARNING: firestore.rules contains development rules!"
          echo "üìã Copying production rules..."
          cp firestore.rules.production firestore.rules
          echo "‚úÖ Production Firestore rules will be deployed"
        fi
        
        # Check for admin secret in workflow
        if [[ -z "${{ secrets.FIREBASE_ADMIN_SECRET }}" ]]; then
          echo "‚ö†Ô∏è WARNING: FIREBASE_ADMIN_SECRET not set in GitHub secrets"
          echo "Admin panel functionality may be limited without proper secret configuration"
        fi
        
        echo "‚úÖ Security validation completed"

  # Setup and prepare shared resources
  setup-deployment:
    name: üõ†Ô∏è Setup Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 8
    outputs:
      project-id: ${{ steps.set-project.outputs.project-id }}
      cache-key: ${{ steps.cache-key.outputs.key }}
      firebase-cache-key: ${{ steps.firebase-cache-key.outputs.key }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set project ID
      id: set-project
      run: |
        echo "project-id=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_OUTPUT

    - name: Generate cache keys
      id: cache-key
      run: |
        deps_key="deploy-${{ runner.os }}-${{ env.NODE_VERSION }}-$(sha256sum functions/package-lock.json | cut -d' ' -f1)"
        echo "key=$deps_key" >> $GITHUB_OUTPUT
        echo "Generated dependencies cache key: $deps_key"

    - name: Generate Firebase cache key
      id: firebase-cache-key
      run: |
        # Use a more stable cache key based on Firebase CLI version
        firebase_key="firebase-cli-${{ runner.os }}-node${{ env.NODE_VERSION }}-$(date +%Y-%m)"
        echo "key=$firebase_key" >> $GITHUB_OUTPUT
        echo "Generated Firebase cache key: $firebase_key"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'functions/package-lock.json'

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          functions/node_modules
          ~/.npm
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          deploy-${{ runner.os }}-${{ env.NODE_VERSION }}-

    - name: Cache Firebase CLI
      id: cache-firebase
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm/_npx
          ~/.cache/firebase
        key: ${{ steps.firebase-cache-key.outputs.key }}
        restore-keys: |
          firebase-cli-${{ runner.os }}-node${{ env.NODE_VERSION }}-

    - name: Install Firebase CLI
      run: |
        echo "üì¶ Installing Firebase CLI..."
        npm install -g firebase-tools
        firebase --version
        echo "Firebase CLI installed at: $(which firebase)"

    - name: Verify Firebase CLI
      run: |
        echo "üîç Verifying Firebase CLI installation..."
        which firebase
        firebase --version

    - name: Install Functions Dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        echo "üì¶ Installing functions dependencies..."
        cd functions
        npm ci --prefer-offline --no-audit --no-fund --silent
        cd ..

    - name: Configure Firebase Project
      run: |
        echo "üîß Configuring Firebase project..."
        # Use service account authentication
        npx firebase-tools use prod --project ${{ env.PROJECT_ID }}
        npx firebase-tools projects:list
        echo "‚úÖ Firebase project configured for ${{ env.PROJECT_ID }}"
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}

  # Parallel deployment jobs
  deploy-functions:
    name: ‚ö° Deploy Functions
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: [setup-deployment]
    if: always() && needs.setup-deployment.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'functions/package-lock.json'

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Cache Firebase CLI
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm/_npx
          ~/.cache/firebase
        key: ${{ needs.setup-deployment.outputs.firebase-cache-key }}
        restore-keys: |
          firebase-cli-${{ runner.os }}-node${{ env.NODE_VERSION }}-

    - name: Setup Firebase CLI
      run: |
        echo "üîß Setting up Firebase CLI..."
        # Use npx to ensure we get the cached version or download if needed
        npx firebase-tools@latest --version
        echo "‚úÖ Firebase CLI ready"

    - name: Restore dependencies
      uses: actions/cache@v4
      with:
        path: |
          functions/node_modules
          ~/.npm
        key: ${{ needs.setup-deployment.outputs.cache-key }}
        restore-keys: |
          deploy-${{ runner.os }}-${{ env.NODE_VERSION }}-

    - name: Install dependencies (if cache miss)
      run: |
        cd functions
        if [[ ! -d "node_modules" ]]; then
          echo "Cache miss - installing dependencies..."
          npm ci --prefer-offline --no-audit --no-fund --silent
        fi
        cd ..

    - name: Configure Firebase Functions Environment
      if: ${{ secrets.FIREBASE_ADMIN_SECRET }}
      run: |
        echo "üîê Configuring Firebase Functions environment..."
        npx firebase-tools functions:config:set admin.secret="${{ secrets.FIREBASE_ADMIN_SECRET }}" --project ${{ needs.setup-deployment.outputs.project-id }}
        echo "‚úÖ Admin secret configured"
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}

    - name: Deploy Firebase Functions
      run: |
        echo "‚ö° Deploying Firebase Functions..."
        npx firebase-tools use prod --project ${{ needs.setup-deployment.outputs.project-id }}
        npx firebase-tools deploy --only functions --project ${{ needs.setup-deployment.outputs.project-id }} --force
        echo "‚úÖ Firebase Functions deployed successfully"
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}

  deploy-firestore:
    name: üóÑÔ∏è Deploy Firestore
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [setup-deployment]
    if: always() && needs.setup-deployment.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'functions/package-lock.json'

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Cache Firebase CLI
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm/_npx
          ~/.cache/firebase
        key: ${{ needs.setup-deployment.outputs.firebase-cache-key }}
        restore-keys: |
          firebase-cli-${{ runner.os }}-node${{ env.NODE_VERSION }}-

    - name: Setup Firebase CLI
      run: |
        echo "üîß Setting up Firebase CLI..."
        npx firebase-tools@latest --version
        echo "‚úÖ Firebase CLI ready"

    - name: Deploy Firestore Rules
      run: |
        echo "üóÑÔ∏è Deploying Firestore rules..."
        npx firebase-tools use prod --project ${{ needs.setup-deployment.outputs.project-id }}
        npx firebase-tools deploy --only firestore:rules --project ${{ needs.setup-deployment.outputs.project-id }}
        echo "‚úÖ Firestore rules deployed successfully"
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}

    - name: Deploy Firestore Indexes
      run: |
        echo "üìä Deploying Firestore indexes..."
        npx firebase-tools deploy --only firestore:indexes --project ${{ needs.setup-deployment.outputs.project-id }} || echo "‚ö†Ô∏è No indexes to deploy"
        echo "‚úÖ Firestore indexes deployment completed"
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}

  deploy-hosting:
    name: üåê Deploy Hosting
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [setup-deployment]
    if: always() && needs.setup-deployment.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'functions/package-lock.json'

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Cache Firebase CLI
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm/_npx
          ~/.cache/firebase
        key: ${{ needs.setup-deployment.outputs.firebase-cache-key }}
        restore-keys: |
          firebase-cli-${{ runner.os }}-node${{ env.NODE_VERSION }}-

    - name: Setup Firebase CLI
      run: |
        echo "üîß Setting up Firebase CLI..."
        npx firebase-tools@latest --version
        echo "‚úÖ Firebase CLI ready"

    - name: Deploy Firebase Hosting
      run: |
        echo "üåê Deploying Firebase Hosting..."
        npx firebase-tools use prod --project ${{ needs.setup-deployment.outputs.project-id }}
        npx firebase-tools deploy --only hosting --project ${{ needs.setup-deployment.outputs.project-id }}
        echo "‚úÖ Firebase Hosting deployed successfully"
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}

  # Post-deployment verification and notification
  verify-deployment:
    name: ‚úÖ Verify & Notify
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [setup-deployment, deploy-functions, deploy-firestore, deploy-hosting]
    if: always()
    
    steps:
    - name: Check deployment results
      id: check-results
      run: |
        echo "üîç Checking deployment results..."
        
        functions_result="${{ needs.deploy-functions.result }}"
        firestore_result="${{ needs.deploy-firestore.result }}"
        hosting_result="${{ needs.deploy-hosting.result }}"
        
        echo "functions_result=$functions_result" >> $GITHUB_OUTPUT
        echo "firestore_result=$firestore_result" >> $GITHUB_OUTPUT
        echo "hosting_result=$hosting_result" >> $GITHUB_OUTPUT
        
        # Count successful deployments
        success_count=0
        total_count=3
        
        [[ "$functions_result" == "success" ]] && ((success_count++))
        [[ "$firestore_result" == "success" ]] && ((success_count++))
        [[ "$hosting_result" == "success" ]] && ((success_count++))
        
        echo "success_count=$success_count" >> $GITHUB_OUTPUT
        echo "total_count=$total_count" >> $GITHUB_OUTPUT
        
        echo "Deployment Results Summary:"
        echo "  ‚ö° Functions: $functions_result"
        echo "  üóÑÔ∏è Firestore: $firestore_result"
        echo "  üåê Hosting: $hosting_result"
        echo "  üìä Success Rate: $success_count/$total_count"

    - name: Generate deployment summary
      run: |
        echo "# üöÄ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "**Project ID:** ${{ needs.setup-deployment.outputs.project-id }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìä Deployment Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Status | Duration |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| ‚ö° Functions | ${{ needs.deploy-functions.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} | ~12 min |" >> $GITHUB_STEP_SUMMARY
        echo "| üóÑÔ∏è Firestore | ${{ needs.deploy-firestore.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} | ~5 min |" >> $GITHUB_STEP_SUMMARY
        echo "| üåê Hosting | ${{ needs.deploy-hosting.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} | ~8 min |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.check-results.outputs.success_count }}" == "${{ steps.check-results.outputs.total_count }}" ]]; then
          echo "## üéâ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All services deployed successfully to production." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Production URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Website:** https://${{ needs.setup-deployment.outputs.project-id }}.web.app" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin Panel:** https://${{ needs.setup-deployment.outputs.project-id }}.web.app/admin" >> $GITHUB_STEP_SUMMARY
          echo "- **Functions:** https://us-central1-${{ needs.setup-deployment.outputs.project-id }}.cloudfunctions.net/" >> $GITHUB_STEP_SUMMARY
          echo "- **Console:** https://console.firebase.google.com/project/${{ needs.setup-deployment.outputs.project-id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîí Security Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Firestore Rules:** Production rules deployed" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin Secret:** ${{ secrets.FIREBASE_ADMIN_SECRET && '‚úÖ Configured' || '‚ö†Ô∏è Not configured' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin Panel:** Protected with Firebase Auth" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ‚ùå Deployment Issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Some services failed to deploy. Please check the logs above." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Test website accessibility
      if: needs.deploy-hosting.result == 'success'
      run: |
        echo "üåê Testing website accessibility..."
        sleep 10  # Give hosting a moment to propagate
        
        if curl -f -s -o /dev/null --max-time 30 "https://${{ needs.setup-deployment.outputs.project-id }}.web.app"; then
          echo "‚úÖ Website is accessible"
        else
          echo "‚ö†Ô∏è Website not immediately accessible (may take a few minutes to propagate)"
        fi

    - name: Test admin panel accessibility
      if: needs.deploy-hosting.result == 'success'
      run: |
        echo "üîê Testing admin panel accessibility..."
        sleep 5  # Give hosting a moment to propagate
        
        # Test admin route
        if curl -f -s -o /dev/null --max-time 30 "https://${{ needs.setup-deployment.outputs.project-id }}.web.app/admin"; then
          echo "‚úÖ Admin panel route is accessible"
          
          # Check if admin.html is being served (not index.html)
          content=$(curl -s --max-time 30 "https://${{ needs.setup-deployment.outputs.project-id }}.web.app/admin" | head -n 20)
          if echo "$content" | grep -q "Admin Login\|Admin Panel"; then
            echo "‚úÖ Admin panel content verified"
          else
            echo "‚ö†Ô∏è Admin route accessible but content may not be correct"
          fi
        else
          echo "‚ùå Admin panel route not accessible"
        fi

    - name: Notify success
      if: needs.deploy-functions.result == 'success' && needs.deploy-firestore.result == 'success' && needs.deploy-hosting.result == 'success'
      run: |
        echo "::notice title=üöÄ Deployment Successful::All services deployed successfully to production! Website: https://${{ needs.setup-deployment.outputs.project-id }}.web.app"

    - name: Notify partial failure
      if: steps.check-results.outputs.success_count != steps.check-results.outputs.total_count && steps.check-results.outputs.success_count != '0'
      run: |
        echo "::warning title=‚ö†Ô∏è Partial Deployment::${{ steps.check-results.outputs.success_count }}/${{ steps.check-results.outputs.total_count }} services deployed successfully. Check failed deployments above."

    - name: Notify complete failure
      if: steps.check-results.outputs.success_count == '0'
      run: |
        echo "::error title=‚ùå Deployment Failed::All deployment services failed. Please check the logs and try again."
        exit 1 